text1.concordance("monstrous") ## 搜索 monstrous 这个词在 text1 文本中 同理：text2.concordance("affection")
text1.similar("monstrous")    ##  还有那些词出现在相似的上下文中
text2.common_contexts(["monstrous", "very"])  ## 两个以及以上的词出现在相同的上下文中
text4.dispersion_plot(["citizens", "democracy", "freedom", "duties", "America"]) ##  预测文本中的词的分布
sorted(set(text3))   ##  获取text3 的词汇表
len(text3) / len(set(text3))    # 词的平均使用次数
text3.count("smote")      # 计算一个词在文中出现的次数
100 * (text4.count("a") /len(text4))   # 计算一个词在文中出现的百分比

def lexical_diversity(text）:    # 计算词的多样性
    return len(text) / len(set(text))

def percentage(count,total):   # 计算一个词得百分比
    return 100 * count / total

text4[173]   #  取出文本中 第173 个元素
text4.index('awake')   #  取出awake 的坐标
text5[16715:16735]   # 切片获取一段数据

fdist1 = FreqDist(text1)   #   统计词的出现的次数
fdist1.keys()[:50]           #  获取前50个key
fdist1.plot(50, cumulative=True)   # 画出前50个key的分布图
fdist1.hapaxes()                  # 只出现了一次的词
sorted([w for w in set(text1) if len(w) > 15])  # 获取文中长度大于15 的词

# 统计text5长度大于7 出现的频次多与7词的词
fdist5 = FreqDist(text5)
sorted([w for w in set(text5) if len(w) > 7 and fdist5[w] > 7])

list(bigrams(['more', 'is', 'said', 'than', 'done']))  # 双连词  我们可以找到搭配（定义：不经常在一起出现的词序列）
text4.collocations()    #  可以查找出现频率比预期频率更频繁的双连词
freq1 = FreqDist([len(w) for w in text1])   #  获取词长出现的序列
freq1.keys()     #  获取所有词长
freq1.items()    #  获取所有数据的对应的 key 和 value
freq1.max()   # 出现最多的词长是3
freq1[3]   # 获取长度为3 的词出现的次数
freq1.freq(3)   #  词长为3 的字符约占书中全部词汇的 20％

"""
fdist = FreqDist(samples) 创建包含给定样本的频率分布
fdist.inc(sample) 增加样本
fdist['monstrous'] 计数给定样本出现的次数
fdist.freq('monstrous') 给定样本的频率
fdist.N() 样本总数
fdist.keys() 以频率递减顺序排序的样本链表
for sample in fdist: 以频率递减的顺序遍历样本
fdist.max() 数值最大的样本
fdist.tabulate() 绘制频率分布表
fdist.plot() 绘制频率分布图
fdist.plot(cumulative=True) 绘制累积频率分布图
fdist1 < fdist2 测试样本在 fdist1 中出现的频率是否小于 fdist2

s.startswith(t) 测试 s 是否以 t 开头
s.endswith(t) 测试 s 是否以 t 结尾
t in s 测试 s 是否包含 t
s.islower() 测试 s 中所有字符是否都是小写字母
s.isupper() 测试 s 中所有字符是否都是大写字母
s.isalpha() 测试 s 中所有字符是否都是字母
s.isalnum() 测试 s 中所有字符是否都是字母或数字
s.isdigit() 测试 s 中所有字符是否都是数字
s.istitle() 测试 s 是否首字母大写（s 中所有的词都首字母大写）
"""
sorted([w for w in set(text1) if w.endswith('ableness')])
sorted([term for term in set(text4) if 'gnt' in term])
sorted([item for item in set(text6) if item.istitle()])
sorted([item for item in set(sent7) if item.isdigit()])
**********************************************************
在 Python 中文本用链表来表示：['Monty', 'Python']。我们可以使用索引、分片和 l
en()函数对链表进行操作。
词“token”（标识符）是指文本中给定词的特定出现；词“type”（类型）则是指词作为一
个特定序列字母的唯一形式。我们使用 len(text)计数词的标识符，使用 len(set(text))
计数词的类型。
我们使用 sorted(set(t))获得文本 t 的词汇表。
我们使用[f(x) for x in text]对文本的每一项目进行操作。
为了获得没有大小写区分和忽略标点符号的词汇表，我们可以使用 set([w.lower() f
or w in text if w.isalpha()])。
我们使用 for 语句对文本中的每个词进行处理，例如 for win t:或者 for word in te
xt:。后面必须跟冒号和一块在每次循环被执行的缩进的代码。
我们使用 if 语句测试一个条件：if len(word)<5:。后面必须跟冒号和一块仅当条件为
真时执行的缩进的代码。
频率分布是项目连同它们的频率计数的集合(例如：一个文本中的词与它们出现的频
率)。
函数是指定了名字并且可以重用的代码块。函数通过 def 关键字定义，例如在 def mu
lt(x, y)中 x 和 y 是函数的参数，起到实际数据值的占位符的作用。
函数是通过指定它的名字及一个或多个放在括号里的实参来调用，就像这样：mult(3,
4)或者 len(text1)。
